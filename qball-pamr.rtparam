########################################################################
# RUNTIME PARAMETER FILE

#-----------------------------------------------------------------------
# DEBUGGING OPTIONS
#-----------------------------------------------------------------------

# if non-zero, then all params are echoed to screen at runtime
echo_params := 1

# set to 1 for PAMR debugging
pamr_trace_lev := 0

# set 0-3 to output less/more info after every step
evo_trace := 3

# various debugging options that save diagnostic SDF files
# ID_DV_trace  - outputs SDF files related to the initial data
#                generation; set 1 to turn on
# evo_DV_trace - outputs SDF files related to processes that occur near
#                a single time step: residual calculation, TRE
#                calculation, cmask values, etc. for all time levels
#                and grid functions; set to 1 to turn on
# evo_DV_trace_t_on  - determines the time at which the diagnostic grid
#                      functions invoked by evo_DV_trace are generated;
#                      should be a real number indicating evolution time
# evo_DV_trace_t_off - the time at which the diagnostic grid functions
#                      invoked by evo_DV_trace stop being generated;
#                      should be a real number indicating evolution time
ID_DV_trace := 0
evo_DV_trace := 0
evo_DV_trace_t_on := 0.0
evo_DV_trace_t_off := 0.0


#-----------------------------------------------------------------------
# Q-BALL INITIAL DATA
#-----------------------------------------------------------------------

dim := 2
cx  := 32.0
cy  := 32.0
cx1 := 48.0
cy1 := 32.0
cx2 := 16.0
cy2 := 32.0
B   := 0.5 


#-----------------------------------------------------------------------
# GENERAL OPTIONS for PAMR/AMRD
#-----------------------------------------------------------------------

# size of "ghost region" to add along (artificial) child grid boundaries
# when splitting the parent grid across several nodes. Larger ghost width
# yields more "overlap" between nodes
ghost_width := [3 3]

# grid distribution method to use when running on multiple nodes
#
# gdm_grid_by_grid - if = 0,  then it is done "level-by-level" (default);
#                             collectively divide all grids in a level
#                             across all the nodes
#                    if != 0, then it is done "grid-by-grid"; each grid
#                             in a level gets divided across n pieces
#                    Rule of thumb: if (# nodes) >> (# grids per level)
#                                   then gdm_grid_by_grid = 0
#                                   else gdm_grid_by_grid = 1
#
# gdm_align - If non-zero then the ghost regions are "padded" so that
#             all (local) child grid boundaries are force to align with
#             parent gridlines. Default is 0 (off)
#
# gdm_no_overlap - If non-zero, then overlapping grids in the hierarchy are 
#                  clipped prior to distribution in the parallel
#                  environment. Default is 0 (off)
gdm_grid_by_grid := 0
gdm_align := 0
gdm_no_overlap := 0

# if non-zero, the spatial boundary is taken as periodic
periodic := [0 0]

# coordinate range in x, y directions
base_bbox := [0.0 64.0 0.0 64.0]

# base-level grid resolution in x, y directions
# (set to factors of 2^n+1 to ensure nice round output times)
#base_shape := [129 129]
#base_shape := [257 257]
base_shape := [513 513]
#base_shape := [1025 1025]

# minimum size a child grid can be split into
min_width := [5 5]

# spatial/temporal refinement ratio for all levels
rho_sp := 2
rho_tm := 2

# if non-zero, skip the very first regrid when evolving
skip_frg := 0

# method used to generate the initial hierarchy of grids. Options:
# 0 - Take a single (coarse) step of the evolution and use the truncation
#     error estimates from the TRE_vars to initialize the hierarchy
# 1 - use a truncation error estimate from elliptic equations; only
#     relevant for multigrid
id_method := 0

# specify which node will be used for i/o
io_node := 0

# clustering method to use
cls_method := 0

# if clusters are within this distance then merge them into one cluster
cls_merge_dist := 8

# maximum depth of AMR hierarchy
#    max_lev=1 is unigrid 
#    max_lev=2 is always fully refined (self-shadow)
#    max_lev=3 is parent (coarse) grid + finer grids
#    and so on... note that more levels -> larger output file size
max_lev := 3

# set to 1 to enable calculation of global (L-Infinity) norms
calc_global_var_norms := 1

# the minimum possible return value of the L-Infinity norm of each grid function
global_var_norm_floor := 0.0


#-----------------------------------------------------------------------
# EVOLUTION OPTIONS for PAMR/AMRD
#-----------------------------------------------------------------------

# tolerance for iterations in evolution equations
evo_tol := 1e-5
evo_max_iter := 50
evo_min_iter := 3

# separate stopping criteria
evo_ssc := 0

# how the advanced time level t^(n+1) is initialized prior to evolution and iteration
#   0 - do nothing (default) so that the advanced time level of the next
#       step will just be the most retarded time level of the previous
#       step (since time-levels are cyclically switched in PAMR/AMRD)
#   1 - straight copy of data from t^n to t^(n+1)
np1_initial_guess := 0

# TRE_max: max estimated truncation error to determine where to place
#          child grids in the hierarchy. The truncation error at each
#          point is the l2-norm of the estimated truncation errors of
#          all variables specified in TRE_vars. Smaller values will
#          result in larger file sizes, as finer meshes are needed.
# TRE_buffer: number of buffers cells to add to region of high TRE. The
#             buffer zone ensures signals in high-error regions do not
#             leave the flagged region before the next regridding; see
#             also regrid_interval. Should have TRE_buffer > rho_sp
# TRE_ibc_buffer: interior boundary clear buffer, i.e. number of buffer
#                 cells adjacent to interior boundaries in which to
#                 clear/zero the truncation error estimate. You should
#                 have TRE_ibc_buffer < min_width. Applied *BEFORE* TRE_buffer
# TRE_ibc_a_buffer: identical to TRE_ibc_buffer, except applied *AFTER* TRE_buffer
# TRE_ibcp_buffer: same as TRE_ibc_buffer, except computed *locally*
#                  and grid-by-grid. Experimental option...
# TRE_vars: vars for which a TRE estimate should be computed prior to regridding
# TRE_norm: if non-zero, the TRE of each var is divided by its l2 norm
TRE_max := 1.0e-5
TRE_buffer := 6
TRE_ibc_buffer := 2
TRE_ibc_a_buffer := 0
TRE_ibcp_buffer := 0
num_TRE_vars := 4
TRE_vars := [ "phi1" "phi2" "pi1" "pi2" ]
TRE_norm := 0

# local CFL factor
lambda := 0.5

# number of base-level time steps to perform
#steps :=64
#steps :=128
steps :=256
#steps :=512  
#steps :=1024

# how many timeslices to include in the SDF (uses RNPL syntax here)
#save_ivec := 1-*/1
#save_ivec := 1-*/2
save_ivec := 1-*/4
#save_ivec := 1-*/8
#save_ivec := 1-*/16

# specify times to save level 2, 3, etc.
#save_ivec_2 := 1-*/1
#save_ivec_3 := 1-*/1

# amount of dissipation to apply to tn_diss_vars and tnp1_diss_vars
eps_diss := 0.8 

# amount of dissipation to apply to rg_diss_vars (defined in .fparam)
rg_eps_diss := 0.5 

# set to 1 to extend diss stencil all the way to grid boundaries
# see doi.org/10.1016/0021-9991(89)90035-1
diss_bdy := 1

# optional regridding script (can be used for convergence tests)
# 0 - do nothing (same as uncommenting this section)
# 1 - read from a file
# 2 - save to a file
regrid_script := 0
regrid_script_name = "test-out.rgs"
regrid_trace := 0

# how often (in steps) to regrid on each level
regrid_interval := 10 

# the minimum level beyond which regridding can occur (in other words,
# level 1..regrid_min_lev are fixed in time). Default is 2
regrid_min_lev := 2

# list of AMR variables to save to SDF
num_save_2_vars := 2
save_2_vars := [ "modphi" "qdensity" ]

# what to prepend to the SDF output files
save_tag := "2d_AMR_"
